[
{
	"uri": "//localhost:1313/4-createec2server/4.1-createec2/",
	"title": "Create EC2 Server",
	"tags": [],
	"description": "",
	"content": "Create EC2 Instances in Subnets Access the AWS Management Console:\nNavigate to EC2 Click on Instances In the EC2 interface:\nSelect Instances Choose Launch instances Provide a Name and tags for the instance, enter EC2 Public\nChoose the AMI:\nSelect Quick Start Choose Amazon Linux 2 Select an AMI Select an Instance type and opt to Create a new key pair\nIn the Create key pair interface:\nSpecify the Key pair name, e.g., aws-keypair (optional name, you can set any). Choose Key pair type: RSA Select Private key file format: .pem Configure the Network:\nSelect the VPC: ASG Choose the Subnet: Public Subnet 1 Enable Auto-assign public IP For Firewall (Security Group), select Select existing security group Choose Public subnet -SG Click Launch instance Complete the instance creation\nWait for about 5 minutes until the Status check shows 2/2 checks passed\nCreate EC2 in a Private Subnet In the EC2 interface:\nSelect Instances Choose Launch instances Provide a Name and tags, enter EC2 Private\nChoose the AMI:\nSelect Quick Start Choose Amazon Linux 2 Select an AMI Make an instance type selection. Choose Key pair name: aws-keypair Configure the Network:\nSelect the VPC: ASG VPC Choose the Subnet: Private subnet 2 Disable Auto-assign public IP. If not disabling it, ensure you\u0026rsquo;ve checked the configuration for automatically allocating public IP for the subnet. Complete the instance creation:\nClick View all instances Select EC2 Private:\nChoose Details Store Private IPv4 addresses "
},
{
	"uri": "//localhost:1313/3-prerequiste/3.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Access the AWS Management Console interface: Locate and click on VPC Choose VPC Within the VPC interface: Select Your VPC Click on Create VPC Follow these steps to create a VPC: Choose Resource and select VPC only Enter Name tag as ASG Set IPv4 CIDR to 10.10.0.0/16 ::: warning Important Note For the Tenancy configuration, it\u0026rsquo;s recommended to keep the default setting. Switching to Dedicated may restrict the creation of certain EC2 Instance types within the VPC, as they require the default tenancy. :::\nClick on Create VPC Complete the process of creating the VPC Review the details of the newly created VPC. Ensure that Enable DNS resolution and DNS Hostname is disabled: Go to Edit VPC settings Navigate to DNS settings Choose and then click Save "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Amazon VPC Amazon Virtual Private Cloud (Amazon VPC) is a Virtual Private Cloud—a customized virtual network hosted within the AWS Cloud and isolated from the external world. This concept resembles the design and implementation of a distinct standalone network environment in an on-premise data center, a practice still widely employed across many countries.\nWithin this dedicated VPC, users possess comprehensive control over their virtual network environment. This control encompasses the initiation and operation of AWS resources, the ability to choose IP address ranges, establish network subnets, and configure routing tables and network gateways. Secure and convenient resource and application access within the VPC is facilitated through both IPv4 and IPv6 protocols.\nThe term \u0026ldquo;Region\u0026rdquo; refers to vast clusters of AWS data centers situated within specific territories. Multiple VPCs can be established within a single region, with each VPC differentiated by its unique IP address space range. The IPv4 address range is defined by selecting a Classless Inter-Domain Routing (CIDR) notation, such as 10.0.0.0/16. Once created, the Amazon VPC address range remains immutable. These ranges can span from as extensive as /16 (equivalent to 65536 available addresses) to as limited as /28 (allowing for 16 available addresses). Crucially, these ranges must not overlap with any other connected networks.\nThe Amazon VPC service was introduced subsequent to the launch of Amazon EC2. Consequently, AWS provided two distinct networking platforms for a period: EC2-Classic and EC2-VPC. EC2-Classic established a single flat network where all Amazon EC2 instances operated, enabling shared connectivity among AWS clients. However, as of December 2013, AWS exclusively supports EC2-VPC. Each region includes a default VPC along with a default subnet featuring a CIDR block of 172.31.0.0/16.\nContents API Crawl Layer In the following sections, we will delve into the fundamental concepts of VPC.\n"
},
{
	"uri": "//localhost:1313/2-firewallinvpc/2.1-securitygroup/",
	"title": "Security Group",
	"tags": [],
	"description": "",
	"content": "Security Group Basic Features of Security Group Allow Rules Only: Only Allow rules can be added; Deny rules cannot be added. Separate Rules for Traffic: Separate rules can be specified for outgoing and incoming traffic. Initial Inbound Rules: A newly created Security group starts with no Inbound rules. Initially, the instance won\u0026rsquo;t allow any traffic in, requiring the addition of an Inbound rule to enable access. Default Outbound Rule: By default, the Security group includes an Outbound rule that permits all traffic to leave the instance. This rule can be modified or replaced with specific Outbound rules to control outgoing traffic originating from the instance. If there\u0026rsquo;s no Outbound rule, no traffic is allowed to exit the instance. Stateful Service: Security groups are stateful services, meaning that if incoming traffic is allowed, outgoing traffic is automatically permitted, and vice versa, regardless of the Outbound rule. Instance Communication: Instances can communicate only if they are associated with a Security group that permits connections, or if a Security group associated with the instance contains a rule allowing traffic. The default Security group has default rules allowing all traffic. Association with Network Interfaces: Security groups are associated with network interfaces. After initialization, you can change the Security group assigned to an instance, which will also update the Security group for the corresponding primary network interface. Security Group Rule A Security group rule is created to grant access to traffic entering or leaving an instance. This access can apply to a specific CIDR or to a Security group in the same VPC, or even to a Security group in another VPC connected by peering.\nComponents of Security Group Rule Inbound Rules: These include the source of the traffic and the destination port or port range. The source can be another security group, an IPv4 or IPv6 CIDR range, or an IPv4/IPv6 address. Outbound Rules: These include the destination of the traffic and the destination port or port range. The destination can be another security group, an IPv4 or IPv6 CIDR range, an IPv4/IPv6 address, or a service identified by a prefix (e.g. igw_xxx) in the prefix ID list (where services are identified by the prefix ID - the name and ID of the available service in the region). Standard Protocols: Each protocol has a standard protocol number associated with it. For instance, SSH is associated with port number 22. "
},
{
	"uri": "//localhost:1313/",
	"title": "Start with Amazon VPC and AWS VPN Site-to-Site",
	"tags": [],
	"description": "",
	"content": "Start with Amazon VPC and AWS VPN Site-to-Site Overview In this lab, you will explore the fundamentals of Amazon VPC (Virtual Private Cloud) and AWS VPN (Virtual Private Network) Site-to-Site connections. Gain an understanding of essential concepts and features within Amazon VPC, and practice creating a basic VPC. Additionally, learn how to configure a Site-to-Site VPN to establish a connection between an on-premise environment and an AWS VPC environment.\nContent Introduction to VPC Firewall within VPC Preparation Steps Creating an EC2 Server Configuration of Site-to-Site VPN Resource Cleanup "
},
{
	"uri": "//localhost:1313/1-introduce/1.1-subnets/",
	"title": "Subnets",
	"tags": [],
	"description": "",
	"content": "Subnets A subnet is a segment of the IP address range that you use when provisioning your Amazon VPC. It directly provides the active network range to the AWS resources that may run within it, such as Amazon EC2 and Amazon RDS (Amazon Relational Database Service). Subnets are identified through CIDR blocks (e.g., 10.0.1.0/24 and 192.168.0.0/24), and the subnet\u0026rsquo;s CIDRs must be within the VPC\u0026rsquo;s CIDR. The smallest subnet that can be created is /28 (16 IP addresses). AWS reserves the first 4 IP addresses and the last 1 IP address of each subnet for intranet networking purposes. For example, a /28 subnet has 16 available IP addresses, but 5 reserved IPs are used for AWS, leaving 11 usable IP addresses for resources operating within this subnet.\nAn Availability Zone (AZ) is a single or multi-data center located within a Region and identified based on geographical location. Within an AZ, there can be one or more subnets. However, a subnet can only reside in a single AZ and cannot extend to other AZs.\nSubnets are categorized as:\nPublic subnet: This subnet has a route table (discussed later) that directs traffic within the subnet to the VPC\u0026rsquo;s Internet Gateway (IGW) (discussed later). Private subnet: The opposite of a Public subnet, it lacks a route table directing traffic to the VPC\u0026rsquo;s IGW. VPN-only subnet: This subnet has a route table that directs traffic to Amazon VPC\u0026rsquo;s Virtual Private Gateway (VPG) (discussed later). Regardless of the subnet type, the subnet\u0026rsquo;s internal IP address range is always private. This means that it is not possible to directly connect to addresses within this range from outside the Internet.\n"
},
{
	"uri": "//localhost:1313/3-prerequiste/3.2-createsubnet/",
	"title": "Create Subnet",
	"tags": [],
	"description": "",
	"content": "Create Subnet In the VPC Interface:\nSelect Subnets Select Create subnet In the Create subnet Interface:\nSelect ASG VPC Implement Subnet Settings:\nSubnet name: Enter Public Subnet 1 Select AZ ap-southeast-1a IPv4 CIDR block: Import 10.10.1.0/24 according to the architecture description Select Create subnet Finish Creating Subnet\nFollow the same steps to create more subnets:\nPublic subnet 2 with CIDR of 10.10.2.0/24 located in Availability Zone ap-southeast-1b Private subnet 1 with CIDR of 10.10.3.0/24 located in Availability Zone ap-southeast-1a Private subnet 2 with CIDR of 10.10.4.0/24 located in Availability Zone ap-southeast-1b Note: You can see there are 2 columns: Availability Zone and Availability Zone ID. To avoid uneven usage of EC2 resources (for example, using AZ a for primary and AZ b for standby), AWS randomly assigns Availability Zone into Availability Zone ID. Availability Zone is an alias, and Availability Zone ID is the identifier. For instance, in the image above, Availability Zone ap-southeast-1a is assigned the Availability Zone ID apse1-az2. In another AWS account, Availability Zone ap-southeast-1a may have an Availability Zone ID of apse1-az1.\nAllow Automatic Allocation of Public IP Addresses for 2 Public Subnets Tip: Another important point to note is that even though the subnets are the same, configuring the routing table and allocating a public IP address allows us to distinguish between Public and Private Subnets.\nIn the VPC Interface:\nSelect Subnets Select Public Subnet 1 Select Actions Select Edit subnet settings Under Auto-assign IP settings:\nSelect Enable auto-assign public IPv4 address Select Save Repeat the same process for Public subnet 2.\n"
},
{
	"uri": "//localhost:1313/2-firewallinvpc/",
	"title": "Firewall in VPC",
	"tags": [],
	"description": "",
	"content": "Firewall in VPC In this section, we will learn about the basic security features in Amazon VPC, such as the Security Group firewall feature and Network Access Control Lists.\nSecurity Groups A Security Group acts as a virtual firewall for an EC2 Instance, allowing control over network traffic. In a VPC, an Instance can be assigned up to 5 Security Groups. It\u0026rsquo;s important to note that Security Groups operate at the Instance layer and not at the Subnet layer.\nNote: Security Groups function at the virtual machine level, rather than the subnet level. However, each virtual machine within a subnet can be assigned to different security groups.\nNetwork ACLs A Network Access Control List (ACL) is an optional security layer for VPCs. It acts as a firewall to manage incoming and outgoing traffic for one or more subnets. Network ACLs can be configured with the same rules as security groups, providing an additional layer of security to the VPC.\nContents Security Groups Network ACLs "
},
{
	"uri": "//localhost:1313/2-firewallinvpc/2.2-networkacls/",
	"title": "Network ACLs",
	"tags": [],
	"description": "",
	"content": "Network ACLs Default Network ACL: After VPC initialization, a default network ACL is available and can be modified. By default, it grants access to all IPv4 or IPv6 traffic entering or leaving the VPC. Custom Network ACL: You can create a custom network ACL and associate it with a subnet. By default, custom network ACLs deny all incoming and outgoing traffic until access permission rules are added. Subnet Association: Each subnet in the VPC must be associated with a network ACL. If not associated with a specific network ACL, the subnet automatically uses the default network ACL. Multiple Subnets: A network ACL can be associated with multiple subnets, but a subnet can only be linked to one network ACL at a time. Associating a new network ACL with a subnet removes the previous association. Rule Sequencing: Network ACLs have rules with sequence numbers. Rules are evaluated based on their sequence number, from lowest to highest, to determine traffic access for associated subnets. The maximum sequence number is 32766. Allow/Deny Traffic: Network ACLs contain both inbound and outbound rules for allowing or denying traffic. Stateless Service: Network ACLs are stateless; responses to allowed inbound traffic must adhere to outbound traffic rules, and vice versa. Network ACL Rules You can manage rules for the default network ACL or create a new one for the VPC. Changes to the network ACL\u0026rsquo;s rules automatically apply to its associated subnets.\nComponents of a network ACL rule:\nRule Number: Rules are evaluated in sequence order, starting with the lowest number. Once a rule matches traffic, it\u0026rsquo;s immediately applied even if it conflicts with higher-numbered rules. Type: Defines the traffic type (e.g., SSH). Specify traffic types or custom ranges. Protocol: Specify the protocol using standard protocol numbers. Port Range: Define the port or port range for traffic (e.g., HTTP is 80). Source: [Inbound Rule] Defines the traffic origin (CIDR range). Destination: [Outbound Rule] Specifies the traffic destination (CIDR range). Allow/Deny: Choose to Allow or Deny the specified traffic. "
},
{
	"uri": "//localhost:1313/1-introduce/1.2-routetable/",
	"title": "Route Table",
	"tags": [],
	"description": "",
	"content": "Route Table The Route Table, also referred to as the routing table, is responsible for providing routing instructions within a network and is associated with specific subnets.\nFor instance, in the scenario where a Virtual Private Cloud (VPC) is established with the network layer 10.10.0.0/16, along with two subnets, 10.10.1.0/24 and 10.10.2.0/24, each default subnet will be allocated a default route table.\nInside the route table, there will exist a route entry with the following details:\nDestination: 10.10.0.0/16 Target: local This particular route entry signifies that resources created within the same VPC can communicate with each other.\n"
},
{
	"uri": "//localhost:1313/4-createec2server/4.2-connectec2/",
	"title": "Test Connection",
	"tags": [],
	"description": "",
	"content": "Checking Connection ℹ️ Note: There are several ways to connect to EC2 instances. You can follow the instructions to connect to EC2 using PuTTY. In this lab, we will use MobaXterm to establish the connection.\nDownload MobaXterm\nAccess the EC2 Page\nGo to the EC2 page. Select Instances. Choose the EC2 Public instance. Select Details. Locate the Public IPv4 address. Using MobaXterm\nAfter downloading MobaXterm, extract and open it. Select Session. Configuring Session Settings\nIn the Session settings interface, choose SSH. Session Settings Continued\nIn the Session settings interface: Enter the Remote host (Public IPv4 address). Specify the username as ec2-user. Choose the Use private key option and provide the path to the aws-keypair.pem file created and downloaded during EC2 instance creation. Successful Connection\nTesting Internet Connection of EC2 Public\nExecute the following command to test the internet connection of the EC2 Public instance\nping amazon.com -c5 Make a ping to EC2 private ping \u0026lt;IP Private EC2 Private\u0026gt; Connect to the EC2 Private Server and Check Internet Connection Access to EC2\nSelect Instances Select EC2 Private Select Details Select Private IPv4 addresses Then connect SSH to EC2 Public Perform a ping test to the EC2 Private\u0026rsquo;s private IP address to test the connection from the EC2 Public server to the EC2 Private server. Use the following command: ping 10.10.4.105 -c5 EC2 Private will not have a public IP address because we are not assigning this server a public IP. To be able to ssh into EC2 Private, we will make an ssh connection from EC2 Public through EC2 Private private IP address\nDownload the pscp tool to the same folder containing the aws-keypair.ppk file to copy the aws-keypair.pem file from our computer to EC2 Public . You download an RSA and DSA key generation utility as puttygen.exe\nYou download an SCP client, i.e. command-line secure file copy is pscp.exe\nWe use puttygen.exe to generate key\nSelect Load Select aws-keypair.pem\nSelect OK Select Save private key with the name aws-keypair.ppk Complete the generation key Launch Command Prompt. Change the path to the folder you just downloaded pscp. Run the command below to upload the aws-keypair.pem file to the /home/ec2-user/ directory of the EC2 Public server.\nYou will need to replace the public IP address of EC2 Public parameter before running the command. pscp -i aws-keypair.ppk aws-keypair.pem ec2-user@\u0026lt;EC2 PUBLIC public IP address\u0026gt;:/home/ec2-user/ Access to EC2\nSelect Instances Select EC2 Public Select Details View Public IPv4 address Return to the EC2 connection interface. Make sure you copy the aws-keypair.pem file to the EC2 Public server, we execute the command ls Update the permissions for the aws-keypair.pem file by running the chmod 400 aws-keypair.pem command. AWS requires the key pair file to be restricted before it can be used to connect to the EC2 server. chmod 400 aws-keypair.pem SSH to EC2 Private server ssh -i aws-keypair.pem ec2-user@\u0026lt;EC2 Private server\u0026#39;s private IP address\u0026gt; Perform ping test to amazon.com. As you can see, we cannot connect internet from EC2 Private. In the next step, we will create NAT Gateway to allow the EC2 Private server to connect to the internet in the outbound direction. Keep the connection to EC2 Private so that we can check the connection to internet after finishing creating and configuring NAT Gateway. ping amazon.com "
},
{
	"uri": "//localhost:1313/3-prerequiste/3.3-createigw/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Create an Internet Gateway In the VPC interface:\nSelect Internet Gateways Click on Create internet gateway\nConfigure the internet gateway:\nEnter Internet Gateway for the Name tag Click on Create internet gateway\nComplete the creation of the Internet Gateway\nImplement Attach VPC:\nClick on Actions Click on Attach to VPC Select ASG; the VPC ID will be automatically populated Click on Attach internet gateway\nOnce attached successfully, the State of the internet gateway will change to Attached\n"
},
{
	"uri": "//localhost:1313/4-createec2server/4.3-natgateway/",
	"title": "Create NAT Gateway",
	"tags": [],
	"description": "",
	"content": "Create NAT Gateway Access EC2: Select Elastic IPs Select Allocate Elastic IP address In the Allocate Elastic IP address interface: Public IPv4 address pool: Select Amazon\u0026rsquo;s pool of IPv4 addresses Select Allocate Successfully created a Public IP Address Access VPC: Select NAT Gateways Create NAT gateway In NAT gateway interface: Name: Enter NAT gateway Subnet: Select Public subnet 2 Connectivity type: Select Public Elastic IP allocation ID: Select recently created Elastic IP Select Create NAT gateway Successfully created NAT gateway Create Route table - Private and assign to private subnets In the VPC interface: Select Route Tables Select Create route table In the Route table interface: Name: Enter Route table - Private VPC: Select ASG VPC Select Create route table Finish creating Route table - Private In the Route table - Private interface: Select Subnet Associations Select Edit subnet associations In the Edit subnet associations interface: Choose 2 private subnets Select Save associations In the Route table - Private interface: Select Routes Select Edit routes In the Edit routes interface: Select Add route Destination: 0.0.0.0/0 Target: NAT Gateway Select Save changes Double check Routes Test ping amazon.com successfully from EC2 Private: ping amazon.com -c5 "
},
{
	"uri": "//localhost:1313/1-introduce/1.3-internetgateway/",
	"title": "Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Internet Gateway The Internet Gateway (IGW) is a crucial component of Amazon VPC that facilitates communication between resources within the VPC, specifically EC2 instances, and the Internet. The IGW exhibits robust horizontal scalability, along with high levels of redundancy and availability. It operates as a designated target within the Amazon VPC\u0026rsquo;s routing table, playing a vital role in directing traffic from EC2 instances to the external Internet. This process involves translating the network address of the EC2 instance into its corresponding Public IP address.\nMore precisely, the EC2 instances located within the VPC are only aware of their assigned Private IP addresses. However, when there is a need to transmit traffic from these EC2 instances to the Internet, the IGW intervenes by translating the originating Private IP address into the Public IP address (or Elastic IP addresses, as discussed later) assigned to the respective EC2 instance. This translation is upheld through a one-to-one mapping, which persists until the Public IP address is released.\nConversely, when the EC2 instances receive incoming traffic from the Internet, the IGW undertakes the task of translating the target address (Public IP address) into the corresponding Private IP address of the EC2 instance. Subsequently, the IGW forwards this traffic into the Amazon VPC.\n"
},
{
	"uri": "//localhost:1313/3-prerequiste/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "Preparation steps In this exercise, we will be constructing a model based on the following diagram:\nContent Create VPC Create Subnet Create Internet Gateway Create Route Table Create Security Group "
},
{
	"uri": "//localhost:1313/2-firewallinvpc/2.3-vpc-resource-map/",
	"title": "VPC Resource Map",
	"tags": [],
	"description": "",
	"content": "VPC Resource Map To begin, follow these steps to access the VPC Resource Map in the VPC console:\nSelect an existing VPC. In the details section, go to the \u0026ldquo;Resource map\u0026rdquo; tab. Here, you can observe the resources within your VPC and the relationships among them. Hovering over a resource highlights connected lines and related resources. Clicking on a resource reveals brief details and a link to view further information about that resource.\nGetting Started with VPC Creation Experience Enhance your workflow for creating a new high-availability three-tier VPC using the VPC creation experience:\nChoose Create VPC and then select VPC and more in the VPC console. Preview all VPC resources you\u0026rsquo;re about to create on a single page. Name tag auto-generation: Define a prefix for Name tags, influencing the tags for all previewed VPC resources. Customize individual Name tags by clicking on each resource.\nAdjust the default CIDR value (10.0.0.0/16) by clicking the IPv4 CIDR block field and using the CIDR joystick. Move through CIDR blocks within the /16 network mask.\nChoose the number of Availability Zones (AZs) up to 3, affecting the count of public and private subnets to be created.\nFor a three-AZ high-availability VPC, select 6 private subnets. In the preview, verify the relationships and routes in the subnets.\nAdd NAT gateways and VPC endpoints as needed. Set the number of NAT gateways per AZ for high availability. Opt for the S3 Gateway endpoint for more secure Amazon S3 traffic routing.\nEasily assign additional tags to VPC resources. Click \u0026ldquo;Add new tag,\u0026rdquo; provide a Key (e.g., \u0026ldquo;environment\u0026rdquo;) and Value (e.g., \u0026ldquo;test\u0026rdquo;).\nAt the bottom of the page, select \u0026ldquo;Create VPC\u0026rdquo; and monitor the resource creation process, including the IDs of the resources being generated. Validate resources before proceeding. Once resources are created, click \u0026ldquo;View VPC\u0026rdquo; to access the VPC resource map and visualize the setup. "
},
{
	"uri": "//localhost:1313/4-createec2server/",
	"title": "Create EC2 Server",
	"tags": [],
	"description": "",
	"content": "Create EC2 Server In this step, we will create 2 EC2 servers (EC2 instances) following the architecture shown below:\nContent Create EC2 Server Test Connection Create NAT Gateway Using Reachability Analyzer "
},
{
	"uri": "//localhost:1313/4-createec2server/4.4.-createreachabilityanalyzer/",
	"title": "Using Reachability Analyzer",
	"tags": [],
	"description": "",
	"content": "Using Reachability Analyzer Access to VPC interface\nSelect Reachability Analyzer Select Create and analyze path Implement Path Configuration\nName tag, enter EC2 private with EC2 Public For Source type, select Instance Select source as EC2 Public For Destination type, select Instance For Destination, select EC2 Private The remaining parameters are left to default. Select Create and analyze path Wait 5 minutes will show the Reachable status Then see path details. View reverse path details. "
},
{
	"uri": "//localhost:1313/5-vpnsitetosite/",
	"title": "Setting Up Site-to-Site VPN Connection in AWS",
	"tags": [],
	"description": "",
	"content": "In this guide, we will discuss how to connect an On-premise data center to Amazon VPC using a hard or soft VPN, depending on the specific requirements. To establish a Site-to-Site VPN connection, the following steps need to be taken:\n1. Virtual Private Gateway (VPG) and Customer Gateway (CGW) Setup Virtual Private Gateway (VPG): This serves as the control center that connects the virtual private network (VPN) within AWS.\nCustomer Gateway (CGW): This component represents the hard or soft VPN device located at the Client\u0026rsquo;s end.\n2. VPN Tunnel Establishment A VPN tunnel will be initiated as soon as data traffic is exchanged between AWS and the client\u0026rsquo;s network. It is important to specify the routing type to ensure secure and efficient data transmission:\nIf the CGW on the client side supports Border Gateway Protocol (BGP), dynamic routing should be configured for the VPN connection.\nIf not, static routing must be set up. For static routing, specific routes must be entered to establish the connection from the client\u0026rsquo;s side to the VPG at AWS. Additionally, the VPC routing must be configured to allow seamless data exchange within the VPN tunnel.\n3. VPG, CGW, and VPN Features Some key features of VPG, CGW, and VPN include:\nVPG: The terminal component of the VPN tunnel within AWS.\nCGW: Can be either a hardware device or a software application located at the Client\u0026rsquo;s end in the VPN tunnel.\nVPN tunnel connections are initiated from CGW to VPG.\nVPG supports both dynamic routing (BGP) and static routing.\nEach VPN connection comprises two tunnels for high availability.\n4. Lab Setup and Configuration The lab provides hands-on experience in setting up a Site-to-Site VPN connection in AWS. This solution is popular due to its cost-effectiveness and ease of configuration, as AWS offers instructions for various types of client devices. The primary responsibility of the customer is to prepare the internet connection, which will establish a secure tunnel (using IPSec) connecting to AWS via the VPN tunnel.\nIn the lab scope, there are two VPCs: the Main office (VPC ASG) and the Branch office (VPC ASG VPN), located in different Availability Zones (AZs) to ensure network diversity. While EC2 instances can be created in each VPC with external SSH access, they cannot communicate or ping each other using private IP addresses. The goal is to configure the VPN to enable private IP addresses to communicate over the Site-to-Site VPN.\nContent: Create ASG VPN VPC and subnet Configure Site to Site VPN and test connection with private IP "
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will proceed to delete the resources in the following order:\nTerminate EC2 Instances Terminate EC2 instance:\nAccess the Amazon EC2 console at EC2. On the left navigation bar, select \u0026ldquo;Instances.\u0026rdquo; Select all EC2 instances related to the lab. Select Instance state. Select Terminate instance. Confirm termination.\nRemove NAT Gateway and Elastic IP Address Remove NAT Gateway and Elastic IP Address. AWS charges for wasted EIPs, so you need to double-check to avoid unintended charges.\nVisit the Amazon VPC console page at VPC.\nOn the left navigation bar, click \u0026ldquo;NAT Gateway.\u0026rdquo;\nSelect NAT Gateway.\nClick Action.\nClick Delete NAT Gateway.\nType \u0026ldquo;delete.\u0026rdquo;\nClick Delete to confirm the deletion of NAT Gateway.\nDelete Elastic IP Address Continue to delete Elastic IP Address.\nVisit the Amazon VPC console page at VPC.\nOn the left navigation bar, click \u0026ldquo;Elastic IP.\u0026rdquo;\nSelect the Elastic IP Address we created.\nClick Action.\nClick Release Elastic IP Address.\nClick Release.\nDelete the EC2 Instance connection endpoint Access to Endpoint transactions Select Action, select Delete VPC endpoints Enter delete Delete in the following order: VPN Site to Site connection.\nVirtual Private Gateway.\nCustomer Gateway.\nVPC ASG VPN.\nVPC ASG.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]